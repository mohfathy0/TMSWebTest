@model TMSWebTest.Models.CompanyInfo
@{
    ViewBag.Title = "Company Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section LeftPanelContent {
    @Html.Partial("~/Views/LeftPanel/LeftPanelPartial.cshtml")
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.DevExpress().FormLayout(settings =>
{
  settings.Name = "FormLayout";
  settings.Width = Unit.Percentage(100);


  var groupItem = settings.Items.AddGroupItem(groupSettings =>
  {
      groupSettings.Caption = "Company Info";
      groupSettings.Width = Unit.Percentage(100);
      groupSettings.ColumnCount = 3;
  });
  groupItem.GridSettings.StretchLastItem = DefaultBoolean.True;
  groupItem.GridSettings.WrapCaptionAtWidth = 660;
  groupItem.GridSettings.Breakpoints.Add(new LayoutBreakpoint() { Name = "S", ColumnCount = 1, MaxWidth = 500 });
  groupItem.GridSettings.Breakpoints.Add(new LayoutBreakpoint() { Name = "M", ColumnCount = 2, MaxWidth = 800 });
  groupItem.Items.Add(settings.Items.Add(i => i.CompanyName));



  groupItem.Items.Add(settings.Items.Add(i => i.Branch));
  groupItem.Items.Add(settings.Items.Add(i => i.City));
  groupItem.Items.Add(settings.Items.Add(i => i.Country));
  groupItem.Items.Add(settings.Items.Add(i => i.Email));
  groupItem.Items.Add(settings.Items.Add(i => i.Website));
  groupItem.Items.Add(settings.Items.Add(i => i.Mobile));
  groupItem.Items.Add(settings.Items.Add(i => i.VAT_ID_NIP));
  groupItem.Items.Add(settings.Items.Add(i => i.AccountId));
  groupItem.Items.Add(settings.Items.Add(i => i.Address, item =>
  {
      item.NestedExtension().Memo(s => { s.Name = "Memo"; });
      item.ColumnSpan = 2;
  }));
  groupItem.Items.Add(b => { b.Caption = " "; });


  groupItem.Items.Add(b => { b.Caption = " "; });


  groupItem.Items.Add(m => m.Logo, item =>
  {
      item.FieldName = "PhotoData";
      item.Caption = " ";
      item.NestedExtensionType = FormLayoutNestedExtensionItemType.BinaryImage;
      var imgProp = item.NestedExtensionSettings as BinaryImageEditSettings;
      imgProp.Height = 200;
      imgProp.Width = 200;
      item.ColumnSpan = 1;
      item.RowSpan = 1;
  });

  groupItem.Items.Add(b => { b.Caption = " "; });
  groupItem.Items.Add(b => { b.Caption = " "; });



  groupItem.Items.Add(b =>
  {
      // b.RowSpan = 1;
      // b.ColumnSpan = 1;
      b.Caption = " ";
      b.ShowCaption = DefaultBoolean.False;
      b.HorizontalAlign = FormLayoutHorizontalAlign.Right;
      b.NestedExtension().Button(s =>
      {
          s.Name = "btn_Apply"; s.Text = "Apply"; s.UseSubmitBehavior = true;

      });
  });



  //settings.Items.Add(itemSettings =>
  //{
  //    itemSettings.ShowCaption = DefaultBoolean.False;
  //    itemSettings.HorizontalAlign = FormLayoutHorizontalAlign.Right;
  //    itemSettings.SetNestedContent(() =>
  //    {
  //        Html.DevExpress().Button(btnSettings =>
  //        {
  //            btnSettings.Name = "btnUpdate";
  //            btnSettings.Text = "Send";
  //            btnSettings.ControlStyle.CssClass = "flButton";
  //            btnSettings.UseSubmitBehavior = true;
  //        }).Render();
  //        Html.DevExpress().Button(btnSettings =>
  //        {
  //            btnSettings.Name = "btnClear";
  //            btnSettings.Text = "Clear";
  //            btnSettings.ControlStyle.CssClass = "flButton";
  //            btnSettings.ClientSideEvents.Click = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(); }";
  //        }).Render();
  //    });
  //});




}).GetHtml()


    @*<div class="form-horizontal">
            <h4>CompanyInfo</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.VAT_ID_NIP, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.VAT_ID_NIP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.VAT_ID_NIP, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.AccountId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Logo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Logo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Logo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>*@
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
